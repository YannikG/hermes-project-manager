// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectManager.Core.DataAccess;

#nullable disable

namespace ProjectManager.Web.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20230310075753_sort rank")]
    partial class sortrank
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("ProjectManager.Core.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigWorkHoursPerDay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConfigWorkHoursPerWeek")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProjectEndDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProjectStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManager.Core.Entities.TimelineGroupEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SortRank")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("TimelineGroups");
                });

            modelBuilder.Entity("ProjectManager.Core.Entities.TimelineItemEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortRank")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimelineGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TimelineGroupId");

                    b.ToTable("TimelineItems");
                });

            modelBuilder.Entity("ProjectManager.Core.Entities.TimelineGroupEntity", b =>
                {
                    b.HasOne("ProjectManager.Core.Entities.ProjectEntity", "Project")
                        .WithMany("TimelineGroups")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManager.Core.Entities.TimelineItemEntity", b =>
                {
                    b.HasOne("ProjectManager.Core.Entities.TimelineGroupEntity", "TimelineGroup")
                        .WithMany("TimelineItems")
                        .HasForeignKey("TimelineGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimelineGroup");
                });

            modelBuilder.Entity("ProjectManager.Core.Entities.ProjectEntity", b =>
                {
                    b.Navigation("TimelineGroups");
                });

            modelBuilder.Entity("ProjectManager.Core.Entities.TimelineGroupEntity", b =>
                {
                    b.Navigation("TimelineItems");
                });
#pragma warning restore 612, 618
        }
    }
}
